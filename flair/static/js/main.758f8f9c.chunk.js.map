{"version":3,"sources":["components/StackOverFlowProfile.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StackOverflowProfile","props","useState","userState","setUserState","useEffect","axios","get","userId","then","data","items","user_id","className","alt","src","profile_image","display_name","location","reputation","badge_counts","gold","silver","bronze","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yUAuBO,SAASA,EAAqBC,GAAwB,IAAD,EAEtBC,qBAFsB,mBAEjDC,EAFiD,KAEtCC,EAFsC,KAUxD,OANAC,qBAAU,WACNC,IAAMC,IAAN,kDAAqDN,EAAMO,OAA3D,wBACKC,MAAK,SAACC,GACHN,EAAaM,EAAKA,KAAKC,MAAM,SAEtC,CAACV,EAAMO,SAELL,GAAaA,EAAUS,QACpB,yBAAKC,UAAU,yBACX,yBAAKA,UAAU,uBACf,yBAAKC,IAAI,aAAaD,UAAU,gBAAgBE,IAAKZ,EAAUa,gBAC/D,yBAAKH,UAAU,OACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,gBAAgBV,EAAUc,cACzC,yBAAKJ,UAAU,oBAAoBV,EAAUe,UAC7C,yBAAKL,UAAU,sBAAsBV,EAAUgB,cAGvD,yBAAKN,UAAU,UACX,yBAAKA,UAAU,4BAA4BV,EAAUiB,aAAaC,MAClE,yBAAKR,UAAU,8BAA8BV,EAAUiB,aAAaE,QACpE,yBAAKT,UAAU,8BAA8BV,EAAUiB,aAAaG,UAG5E,yBAAKV,UAAU,iCAAgC,6CCzC5CW,MANf,WACE,OACE,kBAACxB,EAAD,CAAsBQ,OAAO,cCMbiB,QACW,cAA7BC,OAAOR,SAASS,UAEe,UAA7BD,OAAOR,SAASS,UAEhBD,OAAOR,SAASS,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.758f8f9c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './stackoverflowprofile.scss';\r\n\r\ninterface IProfileProps{\r\n    userId : string;\r\n}\r\n\r\ninterface IUserData {\r\n    user_id : string;\r\n    profile_image : string;\r\n    display_name : string;\r\n    location : string;\r\n    reputation : string;\r\n    badge_counts : IBadgeCount;\r\n}\r\n\r\ninterface IBadgeCount {\r\n    gold : string;\r\n    silver : string;\r\n    bronze : string;\r\n}\r\n\r\nexport function StackOverflowProfile(props : IProfileProps) {\r\n     \r\n    const [userState, setUserState] = useState<IUserData>();\r\n\r\n    useEffect(() => { \r\n        axios.get(`https://api.stackexchange.com/2.2/users/${props.userId}?site=stackoverflow`)\r\n            .then((data: any) => {\r\n                setUserState(data.data.items[0])\r\n            });\r\n    }, [props.userId])\r\n    return (\r\n        (userState && userState.user_id) ?\r\n            <div className='stackoverflow-profile'>\r\n                <div className=\"stackoverflow-icon\"></div>\r\n                <img alt=\"Loading...\" className='profile-photo' src={userState.profile_image} />\r\n                <div className='top'>\r\n                    <div className='profile-info'>\r\n                        <div className='profile-name'>{userState.display_name}</div>\r\n                        <div className='profile-location'>{userState.location}</div>\r\n                        <div className='profile-stats-repo'>{userState.reputation}</div>\r\n                    </div>\r\n                </div>\r\n                <div className='bottom'>\r\n                    <div className='profile-stats-badge-gold'>{userState.badge_counts.gold}</div>\r\n                    <div className='profile-stats-badge-silver'>{userState.badge_counts.silver}</div>\r\n                    <div className='profile-stats-badge-bronze'>{userState.badge_counts.bronze}</div>\r\n                </div>\r\n            </div> :\r\n            <div className='stackoverflow-profile-loading'><span>Loading...</span></div>\r\n\r\n    )\r\n}","import React from 'react'; \nimport './App.css';\nimport { StackOverflowProfile } from './components/StackOverFlowProfile.component';\n\nfunction App() {\n  return (\n    <StackOverflowProfile userId=\"11083892\" />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}